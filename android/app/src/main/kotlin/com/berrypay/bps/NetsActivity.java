package com.berrypay.bps;

import android.app.Activity;
import android.os.Bundle;
import android.content.Intent;
import android.widget.Toast;
import android.util.Base64;
import android.util.Log;
import java.util.Date;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

import android.annotation.SuppressLint;

import androidx.appcompat.app.AppCompatActivity;

import com.nets.enets.exceptions.InvalidPaymentRequestException;
import com.nets.enets.listener.PaymentCallback;
import com.nets.enets.network.PaymentRequestManager;
import com.nets.enets.utils.result.DebitCreditPaymentResponse;
import com.nets.enets.utils.result.NETSError;
import com.nets.enets.utils.result.NonDebitCreditPaymentResponse;
import com.nets.enets.utils.result.PaymentResponse;
import org.json.JSONException;
import org.json.JSONObject;

public class NetsActivity extends AppCompatActivity {

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        Bundle extras = getIntent().getExtras();
        String amount = extras.getString("amount");
        String txn_ref = extras.getString("txn_ref");
        String umid = extras.getString("umid");
        String api_key = extras.getString("api_key");
        String secret_key = extras.getString("secret_key");
        generatePayload(amount, txn_ref, umid, api_key, secret_key);
    }

    @SuppressLint("SetTextI18n")
    public void generatePayload(String amount, String txn_ref, String umid, String api_key, String secret_key) {

        String txnReq = "{\"ss\":\"1\",\"msg\":{\"netsMid\":\"" + umid
                + "\",\"tid\":\"\",\"submissionMode\":\"B\",\"txnAmount\":\"" + amount + "\",\"merchantTxnRef\":\""
                + txn_ref + "\",\"merchantTxnDtm\":\"" + getTime()
                + ".000\",\"paymentType\":\"SALE\",\"currencyCode\":\"SGD\",\"paymentMode\":\"\",\"merchantTimeZone\":\"+8:00\",\"b2sTxnEndURL\":\"https://berrypay.biz/api/v1/nets/response\",\"b2sTxnEndURLParam\":\"\",\"s2sTxnEndURL\":\"https://berrypay.biz/api/v1/nets/response\",\"s2sTxnEndURLParam\":\"\",\"clientType\":\"S\",\"supMsg\":\"\",\"netsMidIndicator\":\"U\",\"ipAddress\":\"127.0.0.1\",\"language\":\"en\",\"mobileOs\":\"ANDROID\"}}";

        startPayment(txnReq, secret_key, api_key);
    }

    private void startPayment(String txnReq, final String sKey, String key) {

        // Generate HMAC
        String hmac = generateSignature(txnReq, sKey);

        Log.d("startPayment", "txn: " + txnReq);
        Log.d("startPayment", "DEFAULT_SECRET_KEY: " + sKey);
        Log.d("startPayment", "hmac: " + hmac);

        PaymentRequestManager manager = PaymentRequestManager.getSharedInstance();
        try {
            manager.sendPaymentRequest(key, hmac, txnReq, new PaymentCallback() {
                @Override
                public void onResult(PaymentResponse paymentResponse) {
                    // To implement callback functions
                    if (paymentResponse instanceof DebitCreditPaymentResponse) {
                        final DebitCreditPaymentResponse debitCreditPaymentResponse = (DebitCreditPaymentResponse) paymentResponse;
                        String txnRes = debitCreditPaymentResponse.txnResp;
                        String hmac = debitCreditPaymentResponse.hmac;
                        String keyId = debitCreditPaymentResponse.keyId;

                        Log.d("DebitCreditPaymentRes", "txnRes: " + txnRes);
                        Log.d("DebitCreditPaymentRes", "hmac: " + hmac);
                        Log.d("DebitCreditPaymentRes", "keyId: " + keyId);

                        // Next 4 lines show a simplified verification.
                        // Basically checking if the hmac returned tallies with a hmac generated by our
                        // secret key
                        String hmacVerification = generateSignature(txnRes, sKey);
                        Log.d("DebitCreditPaymentRes", "hmacVerification: " + hmacVerification);
                        if (hmacVerification.equals(hmac)) {
                            Log.d("DebitCreditPaymentRes", "Verification Successful");
                        }

                        try {
                            JSONObject txnJSON = new JSONObject(txnRes);
                            JSONObject msg = txnJSON.getJSONObject("msg");
                            String stageRespCode = msg.getString("stageRespCode");
                            Intent intent = new Intent();
                            intent.putExtra("response_code", stageRespCode);
                            setResult(Activity.RESULT_OK, intent);
                            finish();
                            Toast.makeText(NetsActivity.this, "Payment Success\nstageRespCode: " + stageRespCode,
                                    Toast.LENGTH_LONG).show();
                            Log.d("DebitCreditPaymentRes", "stageRespCode: " + stageRespCode);

                        } catch (JSONException e) {
                            e.printStackTrace();
                        }

                        // NETSPay payment will result in this callback.
                    } else if (paymentResponse instanceof NonDebitCreditPaymentResponse) {
                        final NonDebitCreditPaymentResponse nonDebitCreditPaymentResponse = (NonDebitCreditPaymentResponse) paymentResponse;

                        String txn_Status = nonDebitCreditPaymentResponse.status;
                        Intent intent = new Intent();
                        intent.putExtra("response_code", txn_Status);
                        setResult(Activity.RESULT_OK, intent);
                        finish();
                        Log.d("nonDebCredPaymentRes", "txn_Status: " + txn_Status);
                        Toast.makeText(NetsActivity.this, "nonDebitCreditPaymentResponse Payment Success",
                                Toast.LENGTH_LONG).show();
                    }

                }

                @Override
                public void onFailure(NETSError netsError) {
                    String txn_ResponseCode = netsError.responeCode;
                    String txn_ActionCode = netsError.actionCode;
                    Intent intent = new Intent();
                    intent.putExtra("response_code", txn_ResponseCode);
                    setResult(Activity.RESULT_OK, intent);
                    finish();
                    Log.d("netsError", "txn_ResponseCode: " + txn_ResponseCode);
                    Log.d("netsError", "txn_ActionCode: " + txn_ActionCode);

                }
            }, this);
        } catch (InvalidPaymentRequestException e) {
            e.printStackTrace();
            Log.e("InvalidPaymentException", e.getMessage());
        } catch (Exception e) {
            e.printStackTrace();
            Log.e("Exception", e.getMessage());
        }

    }

    // // To create date&time string in proper format.
    public static String getTime() {
        Date date = new Date();
        String formattedTime = String.format("%d%02d%02d %02d:%02d:%02d", date.getYear() + 1900, date.getMonth() + 1,
                date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds());
        Log.d("Time", formattedTime);
        return formattedTime;
    }

    // generate Hash
    public static String generateSignature(String txnReq, String secretKey) {
        String concatPayloadAndSecretKey = txnReq + secretKey;
        String hmac = encodeBase64(hashSHA256ToBytes(concatPayloadAndSecretKey.getBytes()));
        return hmac.replace("\n", "");
    }

    public static byte[] hashSHA256ToBytes(byte[] input) {
        byte[] byteData;

        try {
            MessageDigest md = MessageDigest.getInstance("SHA-256");
            md.update(input);
            byteData = md.digest();
            Log.d("hashSHA256ToBytes", "OK");
            return byteData;
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }

        return null;
    }

    public static String encodeBase64(byte[] data) {
        Log.d("encodeBase64", Base64.encodeToString(data, Base64.DEFAULT));
        return Base64.encodeToString(data, Base64.DEFAULT);
    }
}